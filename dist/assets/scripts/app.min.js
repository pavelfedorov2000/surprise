"use strict";

const app = {
  pathToLibsFiles: './assets/libs'
};
window.app = app;

// polyfills
// before polyfills
(function (arr) {
  arr.forEach(item => {
    if (item.hasOwnProperty('before')) {
      return;
    }
    Object.defineProperty(item, 'before', {
      configurable: true,
      enumerable: true,
      writable: true,
      value: function before() {
        // eslint-disable-next-line prefer-rest-params
        const argArr = Array.prototype.slice.call(arguments);
        const docFrag = document.createDocumentFragment();
        argArr.forEach(argItem => {
          const isNode = argItem instanceof Node;
          docFrag.appendChild(isNode ? argItem : document.createTextNode(String(argItem)));
        });
        this.parentNode.insertBefore(docFrag, this);
      }
    });
  });
})([Element.prototype, CharacterData.prototype, DocumentType.prototype]);

// forEach polyfill
if (window.NodeList && !NodeList.prototype.forEach) {
  NodeList.prototype.forEach = function (callback, thisArg) {
    // eslint-disable-next-line no-param-reassign
    thisArg = thisArg || window;
    for (let i = 0; i < this.length; i++) {
      callback.call(thisArg, this[i], i, this);
    }
  };
}
app.accordion = {
  name: 'accordion',
  description: 'your script description',
  init() {
    $('.accordion-item__toggle').on('click', function () {
      const $accordionItemToggle = $(this);
      const $accordion = $accordionItemToggle.closest('.accordion-item');
      const $accordionItemContent = $accordion.find('.accordion-item__content');
      if ($accordionItemToggle.attr('aria-expanded') === 'false') {
        $accordionItemToggle.attr('aria-expanded', true);
        $accordionItemContent.slideDown();
      } else {
        $accordionItemToggle.attr('aria-expanded', false);
        $accordionItemContent.slideUp();
      }
    });
  }
};
app.yourScriptName = {
  name: 'yourScriptName',
  description: 'your script description',
  init() {
    // your code
  }
};
app.yourScriptName = {
  name: 'yourScriptName',
  description: 'your script description',
  init() {
    // your code
  }
};
app.asideChoose = {
  name: 'asideChoose',
  description: 'your script description',
  init() {
    $('.js-choose-package').on('click', function () {
      const $radioInput = $(this);
      const $choosePackageItem = $radioInput.closest('.choose-package__item');
      const $choosePackageDropdown = $choosePackageItem.find('.choose-package__dropdown');
      const $choosePackageItems = $choosePackageItem.siblings();
      const $radioInputNotThis = $choosePackageItems.find('input[type=radio]');
      const $choosePackageDropdownNotThis = $choosePackageItems.find('.choose-package__dropdown');
      $radioInputNotThis.prop('checked', false);
      $choosePackageDropdownNotThis.slideUp();
      $choosePackageDropdown.slideDown();
    });
    $('.aside-choose-tape__btn').on('click', function () {
      const $btn = $(this);
      $('body').addClass('_lock');
      $(`#${$btn.attr('aria-controls')}`).addClass('active');
    });
    $(document).on('click', '.aside-choose__close', function () {
      const $popup = $(this).closest('.aside-choose');
      $popup.removeClass('active');
      $('body').removeClass('_lock');
    });
  }
};
app.yourScriptName = {
  name: 'yourScriptName',
  description: 'your script description',
  init() {
    // your code
  }
};
app.cart = {
  name: 'cart',
  description: 'your script description',
  init() {
    $('.js-toggle-certificate').on('click', function () {
      const $btn = $(this);
      const $cartItemToggle = $btn.closest('.cart-item').find('.cart-item__dropdown');
      if ($btn.attr('aria-expanded') === 'false') {
        $btn.attr('aria-expanded', true);
        $cartItemToggle.slideDown();
      } else {
        $btn.attr('aria-expanded', false);
        $cartItemToggle.slideUp();
      }
    });
    $('.radio-input').each(function (i, $el) {
      const $radioInput = $($el);
      if ($radioInput.is(':checked')) {
        $radioInput.closest('.radio').find('.radio__dropdown').show();
      }
    });
    $('.radio-input').on('change', function () {
      const $radioInput = $(this);
      const $radio = $radioInput.closest('.radio');
      const $radioNotActive = $radio.siblings();
      if ($radioInput.is(':checked')) {
        $radioNotActive.find('.radio__dropdown').slideUp();
        $radio.find('.radio__dropdown').slideDown();
      }
    });
    $('.cart-section .select__input').on('change', function () {
      const $selectInput = $(this);
      const index = $selectInput.attr('id').split('').at(-1);
      const $tabsContent = $selectInput.closest('.cart-section').find('.tabs-content');
      $tabsContent.each(function (_, $content) {
        $($content).hide();
      });
      $tabsContent.eq(index).fadeIn();
    });
  }
};
app.catalogFilters = {
  name: 'catalogFilters',
  description: 'your script description',
  init() {
    $(document).on('mouseup', function (e) {
      const $catalogFilter = $('.catalog-filter');
      const $catalogFilterBtn = $catalogFilter.find('.catalog-filter__btn');
      const $dropdownFilter = $catalogFilter.find('.dropdown-filter');
      if (!$catalogFilter.is(e.target) && $catalogFilter.has(e.target).length === 0) {
        $catalogFilterBtn.attr('aria-expanded', false);
        $dropdownFilter.slideUp();
      }
    });
    $(document).on('click', '.filter-btn', function () {
      $('body').addClass('_lock');
      $('.catalog-filters.fixed').addClass('active');
    });
    $(document).on('click', '.catalog-filters__back-btn', function () {
      $('body').removeClass('_lock');
      $('.catalog-filters.fixed').removeClass('active');
    });
    if ($(window).width() < 1200 && !$('.catalog-filters').closest('.promo-banner').length) {
      $('.catalog-filters').addClass('fixed');
    } else {
      $('.catalog-filters').removeClass('fixed');
    }
    $(window).on('resize', function () {
      if ($(window).width() < 1200 && !$('.catalog-filters').closest('.promo-banner').length) {
        $('.catalog-filters').addClass('fixed');
      } else {
        $('.catalog-filters').removeClass('fixed');
      }
    });
    const catalogFiltersCondition = $(window).width() < 1200 && $('.catalog-filters').closest('.promo-banner').length;
    $(window).on('scroll', function () {
      const $catalogFilters = $('.promo-banner .catalog-filters');
      if ($catalogFilters.length) {
        const scrollY = $catalogFilters.offset().top + $catalogFilters.height();
        const scrollTop = $(window).scrollTop();
        if (catalogFiltersCondition && scrollTop < scrollY) {
          $catalogFilters.removeClass('fixed');
          $('.filter-btn').addClass('hidden');
        }
      }
    });
    $(window).on('scroll', function () {
      const $catalogFilters = $('.promo-banner .catalog-filters');
      if ($catalogFilters.length) {
        const scrollY = $catalogFilters.offset().top + $catalogFilters.height();
        const scrollTop = $(window).scrollTop();
        if (catalogFiltersCondition && scrollTop > scrollY) {
          $catalogFilters.addClass('fixed');
          $('.filter-btn').removeClass('hidden');
        }
      }
    });
  }
};
app.compareSection = {
  name: 'compare',
  description: 'compare section table scroll logic',
  init() {
    const table = document.querySelector('.table-wrap');
    if (!table) return;
    const tableVisibleWidth = table.getBoundingClientRect().width;
    const tableWidth = table.scrollWidth;
    const ths = table.querySelectorAll('th');
    const compareProductItems = document.querySelectorAll('.compare-product');
    const compareProducts = [...ths].slice(1);
    const thWidth = compareProducts[0].getBoundingClientRect().width;
    const compareProductsWidth = thWidth * compareProducts.length;
    const compareProductsOffsets = compareProducts.map(item => item.offsetLeft);
    const firstThWidth = tableWidth - compareProductsWidth;
    const visibleProductsWidth = tableVisibleWidth - firstThWidth;
    const deltaVisible = visibleProductsWidth - thWidth;
    table.onscroll = function () {
      const scrollX = table.scrollLeft;
      const delta = deltaVisible + scrollX;
      compareProductsOffsets.forEach((_, index) => {
        if (index > 0) {
          if (delta >= compareProductsOffsets[index - 1]) {
            compareProductItems[index].classList.add('in-view');
          } else {
            compareProductItems[index].classList.remove('in-view');
          }
        }
      });
    };
  }
};
app.menu = {
  name: 'menu',
  description: 'menu logic',
  init() {
    $('.menu-btn').on('click', function () {
      const $menuBtn = $(this);
      if ($menuBtn.attr('aria-expanded') === 'false') {
        $('html').addClass('disable-fix');
        $('body').addClass('_lock');
        $('.overlay--menu').fadeIn();
        $('.menu').addClass('active');
        $menuBtn.attr('aria-expanded', true);
        if ($(window).width() < 768) {
          $menuBtn.attr('aria-label', 'Закрыть меню');
        }
      } else {
        $('.menu').removeClass('active');
        $('.overlay--menu').fadeOut();
        $('body').removeClass('_lock');
        $('html').removeClass('disable-fix');
        $menuBtn.attr('aria-expanded', false);
        if ($(window).width() < 768) {
          $menuBtn.attr('aria-label', 'Открыть меню');
        }
      }
    });
    $('.menu__close').on('click', function () {
      $(this).closest('.menu').removeClass('active');
      $('.overlay--menu').fadeOut();
      $('body').removeClass('_lock');
      $('html').removeClass('disable-fix');
    });
    $(document).on('mouseup', function (e) {
      const $menu = $('.menu');
      const $popup = $('.popup');
      const $menuBtn = $('.menu-btn');
      if (!$menu.is(e.target) && $menu.has(e.target).length === 0 && !$menuBtn.is(e.target) && $menuBtn.has(e.target).length === 0 && !$popup.is(e.target) && $popup.has(e.target).length === 0) {
        $menu.removeClass('active');
        $popup.fadeOut();
        $('.overlay').fadeOut();
        $('body').removeClass('_lock');
        $('html').removeClass('disable-fix');
      }
    });
  }
};
app.yourScriptName = {
  name: 'yourScriptName',
  description: 'your script description',
  init() {
    // your code
  }
};
app.popup = {
  name: 'popup',
  description: 'popup logic',
  init() {
    $('.js-toggle-password').on('click', function () {
      const $btn = $(this);
      const $input = $btn.closest('.input-wrap').find('input');
      if ($btn.hasClass('active')) {
        $btn.attr('aria-label', 'Скрыть пароль');
        $btn.removeClass('active');
        $input.attr('type', 'password');
      } else {
        $btn.attr('aria-label', 'Скрыть пароль');
        $btn.addClass('active');
        $input.attr('type', 'text');
      }
    });
    $('[data-popup]').on('click', function () {
      const $btn = $(this);
      const attr = $btn.attr('data-popup');
      const $parent = $btn.closest('.dropdown-certificate-field__item');
      const $popup = $(`#${attr}`);
      $popup.fadeIn();
      if (attr === 'congratulations-popup') {
        $('body').removeClass('_lock');
        $('html').removeClass('disable-fix');
        $('.overlay').hide();
        if ($(window).width() > 767) {
          $parent.append($popup);
        }
      } else {
        $('body').addClass('_lock');
        $('html').addClass('disable-fix');
        $('.overlay').fadeIn();
      }
      if ($btn.hasClass('action-btn')) {
        $btn.attr('aria-expanded', true);
      }
    });

    /* $('[data-popup="congratulations-popup"]').on('click', function () {
        const $btn = $(this);
        const $popup = $(`#${$btn.attr('data-popup')}`);
        const $parent = $btn.closest('.dropdown-certificate-field__item');
         $parent.append($popup);
        $popup.fadeIn();
    }); */

    $(document).on('click', '.congratulation-item', function () {
      const $item = $(this);
      const $siblings = $item.siblings();
      $siblings.removeClass('active');
      $item.parent().siblings().find('.congratulation-item.active').removeClass('active');
      $item.addClass('active');
    });
    $(document).on('click', '.popup__close', function () {
      const $popup = $(this).closest('.popup');
      $popup.fadeOut();
      const $btn = $(`[data-popup="${$popup.attr('id')}"]`);
      if ($btn.hasClass('action-btn')) {
        $btn.attr('aria-expanded', false);
      }
      $('.overlay').fadeOut();
      $('body').removeClass('_lock');
      $('html').removeClass('disable-fix');
    });
    Fancybox.bind('[data-fancybox]', {
      autoFocus: false,
      dragToClose: false,
      closeButton: false,
      showClass: 'fancybox-fadeIn',
      Toolbar: {
        display: {
          left: [],
          middle: [],
          right: ['iterateZoom', 'close']
        }
      },
      Thumbs: {
        showOnStart: false
      }
    });
  }
};
app.progressbar = {
  name: 'progressbar',
  description: 'progressbar',
  init() {
    $(".js-progress-bar").each(function (i, item) {
      const circle = $(item);
      const dataProgress = circle.closest('.metric-reviews__num').attr('data-progress');
      const strokeDashOffsetValue = 100 - +dataProgress * 100;
      circle.css("stroke-dashoffset", strokeDashOffsetValue);
    });
  }
};
app.starRating = {
  name: 'starRating',
  description: 'star rating script',
  init() {
    const ratings = document.querySelectorAll('.rating');
    if (ratings.length > 0) {
      initRatings();
    }
    function initRatings() {
      let ratingActive, ratingValue;
      for (let index = 0; index < ratings.length; index++) {
        const rating = ratings[index];
        initRating(rating);
      }
      function initRating(rating) {
        initRatingStars(rating);
        setRatingActiveWidth();
      }
      function initRatingStars(rating) {
        ratingActive = rating.querySelector('.rating__active');
        ratingValue = rating.querySelector('.rating__num');
      }
      function setRatingActiveWidth() {
        let index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ratingValue.textContent;
        const ratingActiveWidth = index / 0.05;
        ratingActive.style.width = `${ratingActiveWidth}%`;
      }
    }
  }
};
app.select = {
  name: 'select',
  description: 'Custom jquery select',
  init() {
    $('.select:not(.select--with_input) .select__title').on('click', function () {
      const $selectTitle = $(this);
      const $select = $selectTitle.closest('.select');
      const $selectContent = $select.find('.select__content');
      const $selectNotActive = $select.siblings();
      const $selectTitleNotActive = $selectNotActive.find('.select__title');
      const $selectContentNotActive = $selectNotActive.find('.select__content');
      const $catalogFilters = $select.siblings();
      const $catalogFiltersBtns = $catalogFilters.find('.catalog-filter__btn');
      const $dropFilters = $catalogFilters.find('.dropdown-filter');
      $selectTitleNotActive.attr('aria-expanded', false);
      $selectContentNotActive.slideUp();
      $catalogFiltersBtns.attr('aria-expanded', false);
      $dropFilters.slideUp();
      if ($selectTitle.attr('aria-expanded') === 'false') {
        $selectTitle.attr('aria-expanded', true);
        $selectContent.slideDown();
      } else {
        $selectTitle.attr('aria-expanded', false);
        $selectContent.slideUp();
      }
    });
    $('.select__arrow-btn').on('click', function () {
      const $selectArrow = $(this);
      const $select = $selectArrow.closest('.select');
      const $selectContent = $select.find('.select__content');
      const $selectNotActive = $select.siblings();
      const $selectArrowNotActive = $selectNotActive.find('.select__arrow-btn');
      const $selectContentNotActive = $selectNotActive.find('.select__content');
      const $catalogFilters = $select.siblings();
      const $catalogFiltersBtns = $catalogFilters.find('.catalog-filter__btn');
      const $dropFilters = $catalogFilters.find('.dropdown-filter');
      $selectArrowNotActive.attr('aria-expanded', false);
      $selectContentNotActive.slideUp();
      $catalogFiltersBtns.attr('aria-expanded', false);
      $dropFilters.slideUp();
      if (!$select.hasClass('select--type_price') && $selectArrow.attr('aria-expanded') === 'false') {
        $selectArrow.attr('aria-expanded', true);
        $selectContent.slideDown();
      } else {
        $selectArrow.attr('aria-expanded', false);
        $selectContent.slideUp();
      }
    });
    $('.select__title-input').on('focus', function () {
      $(this).closest('.select').find('.select__content').slideUp();
    });
    $('.select__title-input').on('keyup', function () {
      const $selectTitleInput = $(this);
      const $catalogFilterBtnItem = $(`#${$selectTitleInput.attr('data-select-input')}`);
      $catalogFilterBtnItem.text($selectTitleInput.val());
    });
    $('.select__label').on('click', function () {
      const $selectOption = $(this);
      const $select = $selectOption.closest('.select');
      const $selectTitle = $select.find('.select__title');
      const $selectTitleInput = $selectTitle.find('.select__title-input');
      const $selectArrow = $selectTitle.find('.select__arrow');
      const $selectTitleKey = $selectTitle.find('.select__key');
      const $selectTitleKeyDescr = $selectTitle.find('.select__key-descr');
      const $selectTitleValue = $selectTitle.find('.select__value');
      const $selectContent = $select.find('.select__content');
      $selectContent.slideUp();
      if ($select.hasClass('select--with_input')) {
        $selectArrow.attr('aria-expanded', false);
      } else {
        $selectTitle.attr('aria-expanded', false);
      }
      if ($select.hasClass('select--type_price')) {
        $selectTitleKey.text($selectOption.find('.select__key').attr('data-value'));
        $selectTitleKeyDescr.text($selectOption.find('.select__key-descr').attr('data-value'));
        $selectTitleValue.text($selectOption.find('.select__value').attr('data-value'));
      } else if ($select.hasClass('select--with_input')) {
        $selectTitleInput.val($selectOption.attr('data-value'));
      } else if ($select.hasClass('select--type_sort')) {
        $selectTitle.find('span').text($selectOption.attr('data-value'));
      } else {
        $selectTitle.text($selectOption.attr('data-value'));
      }
    });
    $(document).on('mouseup', function (e) {
      const $select = $('.select');
      const $selectTitle = $select.find('.select__title');
      const $selectContent = $select.find('.select__content');
      if (!$select.is(e.target) && $select.has(e.target).length === 0) {
        $selectTitle.attr('aria-expanded', false);
        $selectContent.slideUp();
      }
    });
  }
};
app.tabs = {
  name: 'tabs',
  description: 'tabs',
  init() {
    $('.tab').on('click', function () {
      const $tab = $(this);
      const $tabNotActive = $tab.closest('.tabs').find('.tab.active');
      const tabNotActiveIdArr = $tabNotActive.attr('id').split('_');
      const tabNotActiveId = tabNotActiveIdArr[tabNotActiveIdArr.length - 1];
      const $tabsContent = $(`#${$tab.attr('aria-controls')}`);
      const $tabsContentNotActive = $(`#${$tabNotActive.attr('aria-controls')}`);
      $tabNotActive.removeClass('active');
      $tabNotActive.attr('aria-selected', false);
      $tab.addClass('active');
      $tab.attr('aria-selected', true);
      if ($tab.attr('aria-controls') !== undefined || !$tab.hasClass('js-certificate-tab')) {
        $tabsContentNotActive.hide();
        $tabsContent.fadeIn();
      } else {
        $('[data-tab').show();
        $(`[data-tab=${tabNotActiveId}]`).hide();
      }
    });
  }
};
app.validation = {
  name: 'validation',
  description: 'your script description',
  init() {
    const forms = document.querySelectorAll('.js-form');
    let defaultConfig = {
      // class of the parent element where the error/success class is added
      classTo: 'form-item',
      errorClass: 'error',
      successClass: 'success',
      // class of the parent element where error text element is appended
      errorTextParent: 'form-item',
      // type of element to create for the error text
      errorTextTag: 'span',
      // class of the error text element
      errorTextClass: 'error-text'
    };

    // create the pristine instance
    forms.forEach(form => {
      let pristine = form && new Pristine(form, defaultConfig);
      form.addEventListener('submit', function (e) {
        e.preventDefault();
        pristine.validate();
      });
    });

    //const phoneInput = document.querySelector('input[type=tel]');

    /* pristine.addValidator(phoneInput, function (value) {
        if (value.replace(/\D+/g, '').length > 0) {
            return true;
        }
        return false;
    }, "Некорректный номер", 2, false); */

    // phone mask
    //$("input[type=tel]").mask("+375 (99) 999-99-99");
  }
};

app.addLibs = {
  name: 'addLibs',
  description: 'connect the script library dynamically',
  addScriptFile(nameFile, callback) {
    const body = document.getElementsByTagName('body')[0];
    const script = document.createElement('script');
    script.onload = () => callback && callback();
    script.src = `${app.pathToLibsFiles}/js/${nameFile}.js`;
    body.appendChild(script);
  },
  addStyleFile(nameFile) {
    const appCss = document.getElementById('app-css');
    const link = document.createElement('link');
    link.rel = 'stylesheet';
    link.href = `${app.pathToLibsFiles}/css/${nameFile}.css`;
    appCss.before(link);
  },
  initScript(nameFile, nameLib, callback) {
    let hasLibs = null;
    const scripts = document.querySelectorAll('script');
    scripts.forEach(el => {
      const str = el.getAttribute('src');
      if (str) {
        if (str.indexOf(nameFile) >= 0) {
          hasLibs = true;
        }
      }
    });
    if (!hasLibs) {
      this.addScriptFile(nameFile, callback);
    } else {
      const timerId = setInterval(() => {
        if (window[nameLib] || window.jQuery && jQuery()[nameLib]) {
          callback();
          clearInterval(timerId);
        }
      }, 1);
    }
  },
  initStyle(nameFile) {
    let hasLibs = null;
    const link = document.querySelectorAll('link');
    link.forEach(el => {
      const str = el.getAttribute('src');
      if (str) {
        if (str.indexOf(nameFile) >= 0) {
          hasLibs = true;
        }
      }
    });
    if (!hasLibs) {
      this.addStyleFile(nameFile);
    }
  }
};
$(function () {
  app.menu.init();
  app.tabs.init();
  app.select.init();
  app.accordion.init();
  app.catalogFilters.init();
  app.asideChoose.init();
  app.starRating.init();
  app.cart.init();
  app.popup.init();
  app.validation.init();
  app.progressbar.init();
  app.compareSection.init();
  new AirDatepicker('#calendar', {
    selectedDates: [new Date()]
  });
  new AirDatepicker('.profile-block__date', {
    selectedDates: [new Date()],
    position: $(window).width() < 768 ? 'bottom right' : 'bottom left'
  });
  new AirDatepicker('#add-event .input[data-date]', {
    position: 'top center'
  });
  new AirDatepicker('.order-ready__form .input[data-date]', {
    position: 'top center'
  });
  new AirDatepicker('#edit-event .input[data-date]', {
    selectedDates: [new Date($('#edit-event .input[data-date]').val())],
    position: 'top center'
  });
  $(document).on('click', '.js-add-field', function () {
    $(this).replaceWith(`
            <label class="form-item">
                <input class="input">
            </label>
        `);
  });
  const moreButtonTextArray = ['Подробнее', 'Скрыть'];
  const moreButtonTextMap = new Map();
  moreButtonTextArray.forEach((item, index) => {
    moreButtonTextMap.set(Boolean(index), item);
  });
  $(document).on('click', '.more-text-btn', function () {
    const $moreTextBtn = $(this);
    const $moreTextBtnText = $moreTextBtn.find('.btn__text');
    const $text = $moreTextBtn.prev();
    if ($moreTextBtn.attr('aria-expanded') === 'false') {
      $moreTextBtnText.text(moreButtonTextMap.get(true));
      $moreTextBtn.attr('aria-expanded', true);
      $text.addClass('no-overflow');
    } else {
      $moreTextBtnText.text(moreButtonTextMap.get(false));
      $moreTextBtn.attr('aria-expanded', false);
      $text.removeClass('no-overflow');
    }
  });
  $(document).on('click', '.js-view-review-answers', function () {
    const $btn = $(this);
    const $reviewAnswers = $btn.closest('.review').find('.review__answers');
    if ($btn.attr('aria-expanded') === 'false') {
      $btn.attr('aria-expanded', true);
      $reviewAnswers.slideDown();
    } else {
      $btn.attr('aria-expanded', false);
      $reviewAnswers.slideUp();
    }
  });
  $(document).on('click', '.js-notifications', function () {
    const $notificationsBtn = $(this);
    const $notificationsDropdown = $('.notifications-dropdown');
    if ($notificationsBtn.attr('aria-expanded') === 'false') {
      $notificationsBtn.attr('aria-expanded', true);
      $notificationsBtn.attr('aria-label', 'Закрыть уведомления');
      $notificationsDropdown.addClass('active');
    } else {
      $notificationsBtn.attr('aria-expanded', false);
      $notificationsBtn.attr('aria-label', 'Открыть уведомления');
      $notificationsDropdown.removeClass('active');
    }
  });
  $(document).on('click', '.js-calendar', function () {
    const $calendarBtn = $(this);
    const $calendarDropdown = $('.calendar-dropdown');
    if ($calendarBtn.attr('aria-expanded') === 'false') {
      $calendarBtn.attr('aria-expanded', true);
      $calendarBtn.attr('aria-label', 'Закрыть календарь событий');
      $calendarDropdown.addClass('active');
      if ($(window).width() <= 767) {
        $('body').addClass('_lock');
      }
    } else {
      $calendarBtn.attr('aria-expanded', false);
      $calendarBtn.attr('aria-label', 'Открыть календарь событий');
      $calendarDropdown.removeClass('active');
      if ($(window).width() <= 767) {
        $('body').removeClass('_lock');
      }
    }
  });
  $('.add-event-box__btn').on('click', function () {
    $('.js-calendar').attr('aria-expanded', false);
    $('.js-calendar').attr('aria-label', 'Открыть календарь событий');
    $('.calendar-dropdown').removeClass('active');
  });
  $('#remove-event .popup__btn:last-child').on('click', function () {
    $(this).closest('.popup').fadeOut();
    $('.overlay').fadeOut();
    $('body').removeClass('_lock');
  });
  $(document).on('mousedown', function (e) {
    const $calendarDropdown = $('.calendar-dropdown');
    const $calendarBtn = $('.js-calendar');
    if (!$calendarBtn.is(e.target) && !$calendarBtn.find('svg').is(e.target) && !$calendarDropdown.is(e.target) && $calendarDropdown.has(e.target).length === 0) {
      $calendarBtn.attr('aria-expanded', false);
      $calendarBtn.attr('aria-label', 'Открыть календарь событий');
      $calendarDropdown.removeClass('active');
    }
  });
  $(document).on('mousedown', function (e) {
    const $notificationsDropdown = $('.notifications-dropdown');
    const $notificationsBtn = $('.js-notifications');
    if (!$notificationsBtn.is(e.target) && !$notificationsBtn.find('svg').is(e.target) && !$notificationsDropdown.is(e.target) && $notificationsDropdown.has(e.target).length === 0) {
      $notificationsBtn.attr('aria-expanded', false);
      $notificationsBtn.attr('aria-label', 'Открыть календарь событий');
      $notificationsDropdown.removeClass('active');
    }
  });

  // Скрипт динамического адаптива (для перемещения ДОМ-элементов в другое место если нужно без дублирования кода)
  function DynamicAdapt(type) {
    this.type = type;
  }
  DynamicAdapt.prototype.init = function () {
    const _this = this;
    // массив объектов
    this.оbjects = [];
    this.daClassname = '_dynamic_adapt_';
    // массив DOM-элементов
    this.nodes = document.querySelectorAll('[data-da]');

    // наполнение оbjects объктами
    for (let i = 0; i < this.nodes.length; i++) {
      const node = this.nodes[i];
      const data = node.dataset.da.trim();
      const dataArray = data.split(',');
      const оbject = {};
      оbject.element = node;
      оbject.parent = node.parentNode;
      оbject.destination = document.querySelector(dataArray[0].trim());
      оbject.breakpoint = dataArray[1] ? dataArray[1].trim() : '767';
      оbject.place = dataArray[2] ? dataArray[2].trim() : 'last';
      оbject.index = this.indexInParent(оbject.parent, оbject.element);
      this.оbjects.push(оbject);
    }
    this.arraySort(this.оbjects);

    // массив уникальных медиа-запросов
    this.mediaQueries = Array.prototype.map.call(this.оbjects, function (item) {
      return '(' + this.type + '-width: ' + item.breakpoint + 'px),' + item.breakpoint;
    }, this);
    this.mediaQueries = Array.prototype.filter.call(this.mediaQueries, function (item, index, self) {
      return Array.prototype.indexOf.call(self, item) === index;
    });

    // навешивание слушателя на медиа-запрос
    // и вызов обработчика при первом запуске
    for (let i = 0; i < this.mediaQueries.length; i++) {
      const media = this.mediaQueries[i];
      const mediaSplit = String.prototype.split.call(media, ',');
      const matchMedia = window.matchMedia(mediaSplit[0]);
      const mediaBreakpoint = mediaSplit[1];

      // массив объектов с подходящим брейкпоинтом
      const оbjectsFilter = Array.prototype.filter.call(this.оbjects, function (item) {
        return item.breakpoint === mediaBreakpoint;
      });
      matchMedia.addListener(function () {
        _this.mediaHandler(matchMedia, оbjectsFilter);
      });
      this.mediaHandler(matchMedia, оbjectsFilter);
    }
  };
  DynamicAdapt.prototype.mediaHandler = function (matchMedia, оbjects) {
    if (matchMedia.matches) {
      for (let i = 0; i < оbjects.length; i++) {
        const оbject = оbjects[i];
        оbject.index = this.indexInParent(оbject.parent, оbject.element);
        this.moveTo(оbject.place, оbject.element, оbject.destination);
      }
    } else {
      for (let i = 0; i < оbjects.length; i++) {
        const оbject = оbjects[i];
        if (оbject.element.classList.contains(this.daClassname)) {
          this.moveBack(оbject.parent, оbject.element, оbject.index);
        }
      }
    }
  };

  // Функция перемещения
  DynamicAdapt.prototype.moveTo = function (place, element, destination) {
    element.classList.add(this.daClassname);
    if (place === 'last' || place >= destination.children.length) {
      destination.insertAdjacentElement('beforeend', element);
      return;
    }
    if (place === 'first') {
      destination.insertAdjacentElement('afterbegin', element);
      return;
    }
    destination.children[place].insertAdjacentElement('beforebegin', element);
  };

  // Функция возврата
  DynamicAdapt.prototype.moveBack = function (parent, element, index) {
    element.classList.remove(this.daClassname);
    if (parent.children[index] !== undefined) {
      parent.children[index].insertAdjacentElement('beforebegin', element);
    } else {
      parent.insertAdjacentElement('beforeend', element);
    }
  };

  // Функция получения индекса внутри родителя
  DynamicAdapt.prototype.indexInParent = function (parent, element) {
    const array = Array.prototype.slice.call(parent.children);
    return Array.prototype.indexOf.call(array, element);
  };

  // Функция сортировки массива по breakpoint и place
  // по возрастанию для this.type = min
  // по убыванию для this.type = max
  DynamicAdapt.prototype.arraySort = function (arr) {
    if (this.type === 'min') {
      Array.prototype.sort.call(arr, function (a, b) {
        if (a.breakpoint === b.breakpoint) {
          if (a.place === b.place) {
            return 0;
          }
          if (a.place === 'first' || b.place === 'last') {
            return -1;
          }
          if (a.place === 'last' || b.place === 'first') {
            return 1;
          }
          return a.place - b.place;
        }
        return a.breakpoint - b.breakpoint;
      });
    } else {
      Array.prototype.sort.call(arr, function (a, b) {
        if (a.breakpoint === b.breakpoint) {
          if (a.place === b.place) {
            return 0;
          }
          if (a.place === 'first' || b.place === 'last') {
            return 1;
          }
          if (a.place === 'last' || b.place === 'first') {
            return -1;
          }
          return b.place - a.place;
        }
        return b.breakpoint - a.breakpoint;
      });
      return;
    }
  };
  const da = new DynamicAdapt('max');
  if (document.querySelectorAll('[data-da').length) {
    da.init();
  }
  const table = document.querySelector('.table-wrap');
  if (!table) {
    return;
  }
  const tableVisibleWidth = table.getBoundingClientRect().width;
  const tableWidth = table.scrollWidth;
  const ths = table.querySelectorAll('th');
  const compareProductItems = document.querySelectorAll('.compare-product');
  const compareProducts = [...ths].slice(1);
  const thWidth = compareProducts[0].getBoundingClientRect().width;
  const compareProductsWidth = thWidth * compareProducts.length;
  const compareProductsOffsets = compareProducts.map(item => item.offsetLeft);
  const firstThWidth = tableWidth - compareProductsWidth;
  const visibleProductsWidth = tableVisibleWidth - firstThWidth;
  const deltaVisible = visibleProductsWidth - thWidth;
  table.onscroll = function () {
    const scrollX = table.scrollLeft;
    const delta = deltaVisible + scrollX;
    compareProductsOffsets.forEach((_, index) => {
      if (index > 0) {
        if (delta >= compareProductsOffsets[index - 1]) {
          compareProductItems[index].classList.add('in-view');
        } else {
          compareProductItems[index].classList.remove('in-view');
        }
      }
    });
  };
});
//# sourceMappingURL=app.min.js.map
